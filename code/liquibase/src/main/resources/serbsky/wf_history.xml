<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd"
                   objectQuotingStrategy="QUOTE_ALL_OBJECTS"
                   logicalFilePath="serbsky/wf_history.xml">
    <changeSet id="serbsky/wf_history/migration" author="e.upatov" context="SERBSKY">
        <comment>Миграция старых данных таблицы истории</comment>
        <sql>
            SET @ST_DRAFT = (SELECT a.id FROM rb_status a WHERE a.code = 'DRAFT');
            SET @ST_REGISTERED = (SELECT a.id FROM rb_status a WHERE a.code = 'REGISTERED');
            SET @ST_ON_EXECUTION = (SELECT a.id FROM rb_status a WHERE a.code = 'ON_EXECUTION');
            SET @ST_EXECUTED = (SELECT a.id FROM rb_status a WHERE a.code = 'EXECUTED');
            SET @ST_IN_ARCHIVE = (SELECT a.id FROM rb_status a WHERE a.code = 'IN_ARCHIVE');
            SET @ST_OUT_ARCHIVE = (SELECT a.id FROM rb_status a WHERE a.code = 'OUT_ARCHIVE');
            SET @ST_ON_CONSIDERATION = (SELECT a.id FROM rb_status a WHERE a.code = 'ON_CONSIDERATION');
            SET @ST_ON_AGREEMENT = (SELECT a.id FROM rb_status a WHERE a.code = 'ON_AGREEMENT');
            SET @ST_CANCELED = (SELECT a.id FROM rb_status a WHERE a.code = 'CANCELED');
        </sql>
        <sql>
            SET @ACT_CREATED = (SELECT a.id FROM wf_action a WHERE a.code = 'CREATED');
            SET @ACT_TO_CONSIDERATION = (SELECT a.id FROM wf_action a WHERE a.code = 'TO_CONSIDERATION');
            SET @ACT_TO_AGREEMENT = (SELECT a.id FROM wf_action a WHERE a.code = 'TO_AGREEMENT');
            SET @ACT_REGISTER = (SELECT a.id FROM wf_action a WHERE a.code = 'REGISTER');
            SET @ACT_CUSTOM_REGISTER = (SELECT a.id FROM wf_action a WHERE a.code = 'CUSTOM_REGISTER');
            SET @ACT_TO_EXECUTION = (SELECT a.id FROM wf_action a WHERE a.code = 'TO_EXECUTION');
            SET @ACT_EXECUTE = (SELECT a.id FROM wf_action a WHERE a.code = 'EXECUTE');
            SET @ACT_TO_ARCHIVE = (SELECT a.id FROM wf_action a WHERE a.code = 'TO_ARCHIVE');
            SET @ACT_FROM_ARCHIVE = (SELECT a.id FROM wf_action a WHERE a.code = 'FROM_ARCHIVE');
            SET @ACT_RETURN_TO_ARCHIVE = (SELECT a.id FROM wf_action a WHERE a.code = 'RETURN_TO_ARCHIVE');
            SET @ACT_TO_OTHER_ARCHIVE = (SELECT a.id FROM wf_action a WHERE a.code = 'TO_OTHER_ARCHIVE');
            SET @ACT_CANCEL = (SELECT a.id FROM wf_action a WHERE a.code = 'CANCEL');
        </sql>
        <sql>
            UPDATE wf_history a SET
            a.from_status_id = ( CASE a.from_status_id
            WHEN 110 THEN @ST_OUT_ARCHIVE
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_ON_EXECUTION
            WHEN 2 THEN @ST_REGISTERED
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.to_status_id = ( CASE a.to_status_id
            WHEN 110 THEN @ST_OUT_ARCHIVE
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_ON_EXECUTION
            WHEN 2 THEN @ST_REGISTERED
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.action_id = ( CASE a.action_id
            WHEN 135 THEN @ACT_TO_OTHER_ARCHIVE
            WHEN 110 THEN @ACT_RETURN_TO_ARCHIVE
            WHEN 100 THEN @ACT_FROM_ARCHIVE
            WHEN 90 THEN @ACT_TO_ARCHIVE
            WHEN 2 THEN @ACT_EXECUTE
            WHEN 1 THEN @ACT_REGISTER
            WHEN 0 THEN @ACT_CREATED
            ELSE NULL
            END
            )
            WHERE UPPER(a.docType) like 'INCOMING%';
        </sql>
        <sql>
            UPDATE wf_history a SET
            a.from_status_id = ( CASE a.from_status_id
            WHEN 150 THEN @ST_CANCELED
            WHEN 110 THEN @ST_OUT_ARCHIVE
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_ON_EXECUTION
            WHEN 5 THEN @ST_REGISTERED
            WHEN 3 THEN @ST_ON_AGREEMENT
            WHEN 2 THEN @ST_ON_CONSIDERATION
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.to_status_id = ( CASE a.to_status_id WHEN 150 THEN @ST_CANCELED
            WHEN 110 THEN @ST_OUT_ARCHIVE
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_ON_EXECUTION
            WHEN 5 THEN @ST_REGISTERED
            WHEN 3 THEN @ST_ON_AGREEMENT
            WHEN 2 THEN @ST_ON_CONSIDERATION
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.action_id = ( CASE a.action_id
            WHEN 135 THEN @ACT_TO_OTHER_ARCHIVE
            WHEN 110 THEN @ACT_RETURN_TO_ARCHIVE
            WHEN 100 THEN @ACT_FROM_ARCHIVE
            WHEN 90 THEN @ACT_TO_ARCHIVE
            WHEN 80 THEN @ACT_TO_EXECUTION
            WHEN 55 THEN @ACT_REGISTER
            WHEN 6 THEN @ACT_REGISTER
            WHEN 5 THEN @ACT_REGISTER
            WHEN 2 THEN @ACT_TO_AGREEMENT
            WHEN 1 THEN @ACT_TO_CONSIDERATION
            WHEN 0 THEN @ACT_CREATED
            ELSE NULL
            END
            )
            WHERE UPPER(a.docType) like 'INTERNAL%';
        </sql>
        <sql>
            UPDATE wf_history a SET
            a.from_status_id = ( CASE a.from_status_id
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_REGISTERED
            WHEN 3 THEN @ST_ON_AGREEMENT
            WHEN 2 THEN @ST_ON_CONSIDERATION
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.to_status_id = ( CASE a.to_status_id
            WHEN 150 THEN @ST_CANCELED
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_REGISTERED
            WHEN 3 THEN @ST_ON_AGREEMENT
            WHEN 2 THEN @ST_ON_CONSIDERATION
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.action_id = ( CASE a.action_id
            WHEN 135 THEN @ACT_TO_OTHER_ARCHIVE
            WHEN 110 THEN @ACT_RETURN_TO_ARCHIVE
            WHEN 100 THEN @ACT_FROM_ARCHIVE
            WHEN 99 THEN @ACT_TO_ARCHIVE
            WHEN 82 THEN @ACT_REGISTER
            WHEN 81 THEN @ACT_REGISTER
            WHEN 80 THEN @ACT_REGISTER
            WHEN 3 THEN @ACT_TO_AGREEMENT
            WHEN 2 THEN @ACT_TO_CONSIDERATION
            WHEN 0 THEN @ACT_CREATED
            ELSE NULL
            END
            )
            WHERE UPPER(a.docType) like 'OUTGOING%';
        </sql>
        <sql>
            UPDATE wf_history a SET
            a.from_status_id = ( CASE a.from_status_id
            WHEN 4 THEN @ST_CANCELED
            WHEN 3 THEN @ST_EXECUTED
            WHEN 2 THEN @ST_ON_EXECUTION
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.to_status_id = ( CASE a.to_status_id
            WHEN 4 THEN @ST_CANCELED
            WHEN 3 THEN @ST_EXECUTED
            WHEN 2 THEN @ST_ON_EXECUTION
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.action_id = ( CASE a.action_id
            WHEN 25 THEN @ACT_CANCEL
            WHEN 2 THEN @ACT_EXECUTE
            WHEN 1 THEN @ACT_TO_EXECUTION
            WHEN 0 THEN @ACT_CREATED
            ELSE NULL
            END
            )
            WHERE UPPER(a.docType) like 'TASK%';
        </sql>
        <sql>
            UPDATE wf_history a SET
            a.from_status_id = ( CASE a.from_status_id
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_ON_EXECUTION
            WHEN 2 THEN @ST_REGISTERED
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.to_status_id = ( CASE a.to_status_id
            WHEN 100 THEN @ST_IN_ARCHIVE
            WHEN 90 THEN @ST_EXECUTED
            WHEN 80 THEN @ST_ON_EXECUTION
            WHEN 2 THEN @ST_REGISTERED
            WHEN 1 THEN @ST_DRAFT
            ELSE NULL
            END
            ),
            a.action_id = ( CASE a.action_id
            WHEN 135 THEN @ACT_TO_OTHER_ARCHIVE
            WHEN 110 THEN @ACT_RETURN_TO_ARCHIVE
            WHEN 100 THEN @ACT_FROM_ARCHIVE
            WHEN 90 THEN @ACT_TO_ARCHIVE
            WHEN 80 THEN @ACT_EXECUTE
            WHEN 2 THEN @ACT_TO_EXECUTION
            WHEN 1 THEN @ACT_REGISTER
            WHEN 0 THEN @ACT_CREATED
            ELSE NULL
            END
            )
            WHERE UPPER(a.docType) like 'REQUEST%';
        </sql>
    </changeSet>
    <changeSet id="serbsky/wf_history/delete" author="e.upatov" context="SERBSKY">
        <comment>Удаление неконсистентных данных</comment>
        <delete tableName="wf_history">
            <where>action_id IS NULL OR parent_id IS NULL</where>
        </delete>
        <update tableName="wf_history">
            <column name="commentary"/>
            <where>TRIM(commentary) = ''</where>
        </update>
    </changeSet>
    <changeSet id="serbsky/wf_history/alter" author="e.upatov" context="SERBSKY">
        <comment>Модификация таблицы истории</comment>
        <sql>
            ALTER TABLE `wf_history` CHANGE COLUMN `startDate`
            `start_date` DATETIME NOT NULL COMMENT 'Дата + время совершения действия' AFTER `id`;
            ALTER TABLE `wf_history` CHANGE COLUMN `action_id`
            `action_id` INT(11) NOT NULL COMMENT 'Произведенное над документом действие' AFTER `start_date`;
            ALTER TABLE `wf_history` ADD CONSTRAINT `FK_wf_history__action`
            FOREIGN KEY (`action_id`) REFERENCES `wf_action` (`id`) ON DELETE RESTRICT;
            ALTER TABLE `wf_history` CHANGE COLUMN `from_status_id`
            `from_status_id` INT(11) NOT NULL COMMENT 'На каком статусе документа было выполнено действие' AFTER `action_id`;
            ALTER TABLE `wf_history` ADD CONSTRAINT `FK_wf_history__from_status`
            FOREIGN KEY (`from_status_id`) REFERENCES `rb_status` (`id`);
            ALTER TABLE `wf_history` CHANGE COLUMN `to_status_id`
            `to_status_id` INT(11) NULL COMMENT 'На какой статус был переведен документ во время выполнения действия' AFTER `from_status_id`;
            ALTER TABLE `wf_history` ADD CONSTRAINT `FK_wf_history__to_status`
            FOREIGN KEY (`to_status_id`) REFERENCES `rb_status` (`id`);
            ALTER TABLE `wf_history` CHANGE COLUMN `owner_id`
            `user_id` INT(11) NOT NULL COMMENT 'Пользователь, выполнивший действие' AFTER `to_status_id`;
            ALTER TABLE `wf_history` CHANGE COLUMN `commentary`
            `commentary` VARCHAR(512) NULL COMMENT 'Комментарий к действию' AFTER `user_id`;
            ALTER TABLE `wf_history` CHANGE COLUMN `processed`
            `processed` BIT(1) NOT NULL COMMENT 'Флаг успешности выполненеия действия' AFTER `commentary`;
            ALTER TABLE `wf_history` CHANGE COLUMN `parent_id`
            `document_id` INT(11) NOT NULL COMMENT 'Идентифкатор (целочисленный) документа к которому относится запись в истории' AFTER `commentary`;
            ALTER TABLE `wf_history`
            ADD COLUMN `document_type_id` INT(11) NOT NULL COMMENT 'Тип документа, к которому относится запись в истории' DEFAULT '0' AFTER `document_id`;
        </sql>
        <sql dbms="mysql">
            UPDATE `wf_history` SET document_type_id = (SELECT id FROM rbDocumentType WHERE code = 'INCOMING') WHERE UPPER(docType) like 'INCOMING%';
            UPDATE `wf_history` SET document_type_id = (SELECT id FROM rbDocumentType WHERE code = 'OUTGOING') WHERE UPPER(docType) like 'OUTGOING%';
            UPDATE `wf_history` SET document_type_id = (SELECT id FROM rbDocumentType WHERE code = 'INTERNAL') WHERE UPPER(docType) like 'INTERNAL%';
            UPDATE `wf_history` SET document_type_id = (SELECT id FROM rbDocumentType WHERE code = 'REQUEST') WHERE UPPER(docType) like 'REQUEST%';
            UPDATE `wf_history` SET document_type_id = (SELECT id FROM rbDocumentType WHERE code = 'TASK') WHERE UPPER(docType) like 'TASK%';
            DELETE FROM `wf_history` WHERE document_type_id = 0;
            ALTER TABLE `wf_history` ADD CONSTRAINT `FK_wf_history__document_type`
            FOREIGN KEY (`document_type_id`) REFERENCES `rbDocumentType` (`id`) ON DELETE CASCADE;
        </sql>
        <sql>
            ALTER TABLE `wf_history` DROP COLUMN `docType`;
            ALTER TABLE `wf_history` DROP COLUMN `created`;
            ALTER TABLE `wf_history` DROP COLUMN `endDate`;
        </sql>
    </changeSet>
</databaseChangeLog>